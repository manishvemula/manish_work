# 0 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Library/BaseIoLibIntrinsic/X64/IoFifoSev.nasm"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/MdePkg/Library/BaseIoLibIntrinsic/BaseIoLibIntrinsicSev/DEBUG/AutoGen.h" 1
# 16 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/MdePkg/Library/BaseIoLibIntrinsic/BaseIoLibIntrinsicSev/DEBUG/AutoGen.h"
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h" 1
# 21 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/X64/ProcessorBind.h" 1
# 162 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/X64/ProcessorBind.h"
typedef unsigned long long UINT64;



typedef long long INT64;



typedef unsigned int UINT32;



typedef int INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;






typedef UINT64 UINTN;




typedef INT64 INTN;
# 22 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h" 2
# 213 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 607 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef __builtin_ms_va_list VA_LIST;
# 711 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 816 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (BOOLEAN) == sizeof (BOOLEAN), "Alignment of BOOLEAN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT8) == sizeof (INT8), "Alignment of INT8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT8) == sizeof (UINT8), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT16) == sizeof (INT16), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT16) == sizeof (UINT16), "Alignment of UINT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT32) == sizeof (INT32), "Alignment of INT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT32) == sizeof (UINT32), "Alignment of UINT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT64) == sizeof (INT64), "Alignment of INT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT64) == sizeof (UINT64), "Alignment of UINT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR8) == sizeof (CHAR8), "Alignment of CHAR8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR16) == sizeof (CHAR16), "Alignment of CHAR16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INTN) == sizeof (INTN), "Alignment of INTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINTN) == sizeof (UINTN), "Alignment of UINTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (void *) == sizeof (void *), "Alignment of VOID * does not meet UEFI Specification Data Type requirements");
# 852 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyInt32EnumValue = 0x7fffffff
} __VERIFY_INT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_INT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (__VERIFY_UINT8_ENUM_SIZE) == sizeof (__VERIFY_UINT8_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_UINT16_ENUM_SIZE) == sizeof (__VERIFY_UINT16_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_INT32_ENUM_SIZE) == sizeof (__VERIFY_INT32_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
# 1026 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/MdePkg/Library/BaseIoLibIntrinsic/BaseIoLibIntrinsicSev/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;




extern UINT64 _gPcd_SkuId_Array[];
# 0 "<command-line>" 2
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Library/BaseIoLibIntrinsic/X64/IoFifoSev.nasm"
;------------------------------------------------------------------------------
;
; Copyright (c) 2006 - 2012, Intel Corporation. All rights reserved.<BR>
; Copyright (c) 2017, AMD Incorporated. All rights reserved.<BR>
;
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
;------------------------------------------------------------------------------

    DEFAULT REL
    SECTION .text

;------------------------------------------------------------------------------
; Check whether we need to unroll the String I/O in SEV guest
;
; Return
;------------------------------------------------------------------------------
global SevNoRepIo
SevNoRepIo:

  ; CPUID clobbers ebx, ecx and edx
  push rbx
  push rcx
  push rdx

  ; Check if we are runing under hypervisor
  ; CPUID(1).ECX Bit 31
  mov eax, 1
  cpuid
  bt ecx, 31
  jnc @UseRepIo

  ; Check if we have Memory encryption CPUID leaf
  mov eax, 0x80000000
  cpuid
  cmp eax, 0x8000001f
  jl @UseRepIo

  ; Check for memory encryption feature:
  ; CPUID Fn8000_001F[EAX] - Bit 1
  ;
  mov eax, 0x8000001f
  cpuid
  bt eax, 1
  jnc @UseRepIo

  ; Check if memory encryption is enabled
  ; MSR_0xC0010131 - Bit 0 (SEV enabled)
  ; MSR_0xC0010131 - Bit 1 (SEV-ES enabled)
  mov ecx, 0xc0010131
  rdmsr

  ; Check for (SevEsEnabled == 0 && SevEnabled == 1)
  and eax, 3
  cmp eax, 1
  je @SevNoRepIo_Done

@UseRepIo:
  xor eax, eax

@SevNoRepIo_Done:
  pop rdx
  pop rcx
  pop rbx
  ret

;------------------------------------------------------------------------------
; void
;
; SevIoReadFifo8 (
; UINTN Port,
; UINTN Size,
; void *Buffer
; );
;------------------------------------------------------------------------------
global SevIoReadFifo8
SevIoReadFifo8:
    xchg rcx, rdx
    xchg rdi, r8 ; rdi: buffer address; r8: save rdi

    ; Check if we need to unroll String I/O
    call SevNoRepIo
    test eax, eax
    jnz @IoReadFifo8_NoRep

    cld
    rep insb
    jmp @IoReadFifo8_Done

@IoReadFifo8_NoRep:
    jrcxz @IoReadFifo8_Done

@IoReadFifo8_Loop:
    in al, dx
    mov byte [rdi], al
    inc rdi
    loop @IoReadFifo8_Loop

@IoReadFifo8_Done:
    mov rdi, r8 ; restore rdi
    ret

;------------------------------------------------------------------------------
; void
;
; SevIoReadFifo16 (
; UINTN Port,
; UINTN Size,
; void *Buffer
; );
;------------------------------------------------------------------------------
global SevIoReadFifo16
SevIoReadFifo16:
    xchg rcx, rdx
    xchg rdi, r8 ; rdi: buffer address; r8: save rdi

    ; Check if we need to unroll String I/O
    call SevNoRepIo
    test eax, eax
    jnz @IoReadFifo16_NoRep

    cld
    rep insw
    jmp @IoReadFifo16_Done

@IoReadFifo16_NoRep:
    jrcxz @IoReadFifo16_Done

@IoReadFifo16_Loop:
    in ax, dx
    mov word [rdi], ax
    add rdi, 2
    loop @IoReadFifo16_Loop

@IoReadFifo16_Done:
    mov rdi, r8 ; restore rdi
    ret

;------------------------------------------------------------------------------
; void
;
; SevIoReadFifo32 (
; UINTN Port,
; UINTN Size,
; void *Buffer
; );
;------------------------------------------------------------------------------
global SevIoReadFifo32
SevIoReadFifo32:
    xchg rcx, rdx
    xchg rdi, r8 ; rdi: buffer address; r8: save rdi

    ; Check if we need to unroll String I/O
    call SevNoRepIo
    test eax, eax
    jnz @IoReadFifo32_NoRep

    cld
    rep insd
    jmp @IoReadFifo32_Done

@IoReadFifo32_NoRep:
    jrcxz @IoReadFifo32_Done

@IoReadFifo32_Loop:
    in eax, dx
    mov dword [rdi], eax
    add rdi, 4
    loop @IoReadFifo32_Loop

@IoReadFifo32_Done:
    mov rdi, r8 ; restore rdi
    ret

;------------------------------------------------------------------------------
; void
;
; IoWriteFifo8 (
; UINTN Port,
; UINTN Size,
; void *Buffer
; );
;------------------------------------------------------------------------------
global SevIoWriteFifo8
SevIoWriteFifo8:
    xchg rcx, rdx
    xchg rsi, r8 ; rsi: buffer address; r8: save rsi

    ; Check if we need to unroll String I/O
    call SevNoRepIo
    test eax, eax
    jnz @IoWriteFifo8_NoRep

    cld
    rep outsb
    jmp @IoWriteFifo8_Done

@IoWriteFifo8_NoRep:
    jrcxz @IoWriteFifo8_Done

@IoWriteFifo8_Loop:
    mov al, byte [rsi]
    out dx, al
    inc rsi
    loop @IoWriteFifo8_Loop

@IoWriteFifo8_Done:
    mov rsi, r8 ; restore rsi
    ret

;------------------------------------------------------------------------------
; void
;
; SevIoWriteFifo16 (
; UINTN Port,
; UINTN Size,
; void *Buffer
; );
;------------------------------------------------------------------------------
global SevIoWriteFifo16
SevIoWriteFifo16:
    xchg rcx, rdx
    xchg rsi, r8 ; rsi: buffer address; r8: save rsi

    ; Check if we need to unroll String I/O
    call SevNoRepIo
    test eax, eax
    jnz @IoWriteFifo16_NoRep

    cld
    rep outsw
    jmp @IoWriteFifo16_Done

@IoWriteFifo16_NoRep:
    jrcxz @IoWriteFifo16_Done

@IoWriteFifo16_Loop:
    mov ax, word [rsi]
    out dx, ax
    add rsi, 2
    loop @IoWriteFifo16_Loop

@IoWriteFifo16_Done:
    mov rsi, r8 ; restore rsi
    ret

;------------------------------------------------------------------------------
; void
;
; SevIoWriteFifo32 (
; UINTN Port,
; UINTN Size,
; void *Buffer
; );
;------------------------------------------------------------------------------
global SevIoWriteFifo32
SevIoWriteFifo32:
    xchg rcx, rdx
    xchg rsi, r8 ; rsi: buffer address; r8: save rsi

    ; Check if we need to unroll String I/O
    call SevNoRepIo
    test eax, eax
    jnz @IoWriteFifo32_NoRep

    cld
    rep outsd
    jmp @IoWriteFifo32_Done

@IoWriteFifo32_NoRep:
    jrcxz @IoWriteFifo32_Done

@IoWriteFifo32_Loop:
    mov eax, dword [rsi]
    out dx, eax
    add rsi, 4
    loop @IoWriteFifo32_Loop

@IoWriteFifo32_Done:
    mov rsi, r8 ; restore rsi
    ret
