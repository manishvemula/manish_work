# 0 "/home/cdac/fw/edk2-ws/edk2/OvmfPkg/Library/PlatformInitLib/X64/Paging.nasm"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/Library/PlatformInitLib/PlatformInitLib/DEBUG/AutoGen.h" 1
# 16 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/Library/PlatformInitLib/PlatformInitLib/DEBUG/AutoGen.h"
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h" 1
# 21 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/X64/ProcessorBind.h" 1
# 162 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/X64/ProcessorBind.h"
typedef unsigned long long UINT64;



typedef long long INT64;



typedef unsigned int UINT32;



typedef int INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;






typedef UINT64 UINTN;




typedef INT64 INTN;
# 22 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h" 2
# 213 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 607 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef __builtin_ms_va_list VA_LIST;
# 711 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 816 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (BOOLEAN) == sizeof (BOOLEAN), "Alignment of BOOLEAN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT8) == sizeof (INT8), "Alignment of INT8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT8) == sizeof (UINT8), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT16) == sizeof (INT16), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT16) == sizeof (UINT16), "Alignment of UINT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT32) == sizeof (INT32), "Alignment of INT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT32) == sizeof (UINT32), "Alignment of UINT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT64) == sizeof (INT64), "Alignment of INT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT64) == sizeof (UINT64), "Alignment of UINT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR8) == sizeof (CHAR8), "Alignment of CHAR8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR16) == sizeof (CHAR16), "Alignment of CHAR16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INTN) == sizeof (INTN), "Alignment of INTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINTN) == sizeof (UINTN), "Alignment of UINTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (void *) == sizeof (void *), "Alignment of VOID * does not meet UEFI Specification Data Type requirements");
# 852 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyInt32EnumValue = 0x7fffffff
} __VERIFY_INT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_INT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (__VERIFY_UINT8_ENUM_SIZE) == sizeof (__VERIFY_UINT8_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_UINT16_ENUM_SIZE) == sizeof (__VERIFY_UINT16_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_INT32_ENUM_SIZE) == sizeof (__VERIFY_INT32_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
# 1026 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/Library/PlatformInitLib/PlatformInitLib/DEBUG/AutoGen.h" 2
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h" 1
# 809 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdSetSku (
  UINTN SkuId
  );
# 825 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGet8 (
  UINTN TokenNumber
  );
# 841 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGet16 (
  UINTN TokenNumber
  );
# 857 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGet32 (
  UINTN TokenNumber
  );
# 873 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGet64 (
  UINTN TokenNumber
  );
# 889 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetPtr (
  UINTN TokenNumber
  );
# 905 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetBool (
  UINTN TokenNumber
  );
# 919 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSize (
  UINTN TokenNumber
  );
# 939 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGetEx8 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 960 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGetEx16 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 978 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGetEx32 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 999 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGetEx64 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1020 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetExPtr (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1041 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetExBool (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1062 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetExSize (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1081 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet8S (
  UINTN TokenNumber,
  UINT8 Value
  );
# 1100 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet16S (
  UINTN TokenNumber,
  UINT16 Value
  );
# 1119 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet32S (
  UINTN TokenNumber,
  UINT32 Value
  );
# 1138 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet64S (
  UINTN TokenNumber,
  UINT64 Value
  );
# 1167 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetPtrS (
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1187 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetBoolS (
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1210 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx8S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT8 Value
  );
# 1234 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx16S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT16 Value
  );
# 1258 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx32S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT32 Value
  );
# 1282 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx64S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT64 Value
  );
# 1312 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExPtrS (
  const GUID *Guid,
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  void *Buffer
  );
# 1337 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExBoolS (
  const GUID *Guid,
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1361 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
typedef
void
( *PCD_CALLBACK)(
  const GUID *CallBackGuid ,
  UINTN CallBackToken,
  void *TokenData,
  UINTN TokenDataSize
  );
# 1386 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCallbackOnSet (
  const GUID *Guid ,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1407 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCancelCallback (
  const GUID *Guid ,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1434 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetNextToken (
  const GUID *Guid ,
  UINTN TokenNumber
  );
# 1454 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
GUID *

LibPcdGetNextTokenSpace (
  const GUID *TokenSpaceGuid
  );
# 1483 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtr (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1515 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrS (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1549 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtrAndSize (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1584 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrAndSizeS (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {




  PCD_TYPE PcdType;




  UINTN PcdSize;






  CHAR8 *PcdName;
} PCD_INFO;
# 1635 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfo (
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1655 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfoEx (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1670 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSku (
  void
  );
# 18 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/Library/PlatformInitLib/PlatformInitLib/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;




extern GUID gEfiSmmSmramMemoryGuid;
extern GUID gEfiAcpiVariableGuid;
extern GUID gUefiOvmfPkgTokenSpaceGuid;
extern GUID gEmbeddedTokenSpaceGuid;
extern GUID gEfiMdeModulePkgTokenSpaceGuid;
extern GUID gUefiCpuPkgTokenSpaceGuid;
extern GUID gEfiMdePkgTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfWorkAreaBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfWorkAreaSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfLockBoxStorageBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfLockBoxStorageSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfCpuidBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfCpuidSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdMemoryTypeEfiACPIMemoryNVS;






extern const UINT32 _gPcd_FixedAtBuild_PcdMemoryTypeEfiACPIReclaimMemory;






extern const UINT32 _gPcd_FixedAtBuild_PcdMemoryTypeEfiReservedMemoryType;






extern const UINT32 _gPcd_FixedAtBuild_PcdMemoryTypeEfiRuntimeServicesCode;






extern const UINT32 _gPcd_FixedAtBuild_PcdMemoryTypeEfiRuntimeServicesData;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbBackupBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbBackupSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSnpSecretsBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSnpSecretsSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecPageTablesBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecPageTablesSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecPeiTempRamBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecPeiTempRamSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbPageTableBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbPageTableSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdFlashNvStorageFtwSpareSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdFlashNvStorageVariableSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdCpuLocalApicBaseAddress;






extern const UINT32 _gPcd_FixedAtBuild_PcdXenPvhStartOfDayStructPtr;






extern const UINT32 _gPcd_FixedAtBuild_PcdXenPvhStartOfDayStructPtrSize;






extern const UINT64 _gPcd_FixedAtBuild_PcdGuidedExtractHandlerTableAddress;






extern const UINT32 _gPcd_FixedAtBuild_PcdGuidedExtractHandlerTableSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdTdxAcceptPageSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfFlashNvStorageVariableBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdCfvRawDataSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfEarlyMemDebugLogBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfEarlyMemDebugLogSize;






extern const BOOLEAN _gPcd_FixedAtBuild_PcdDxeIplSwitchToLongMode;



extern const UINT64 _gPcd_FixedAtBuild_PcdPciExpressBaseAddress;






extern const BOOLEAN _gPcd_FixedAtBuild_PcdUse1GPageTable;






extern const BOOLEAN _gPcd_FixedAtBuild_PcdUse5LevelPageTable;
# 0 "<command-line>" 2
# 1 "/home/cdac/fw/edk2-ws/edk2/OvmfPkg/Library/PlatformInitLib/X64/Paging.nasm"
;------------------------------------------------------------------------------
; @file
;
; Switch from 5-level paging mode to 4-level paging mode.
;
; This assumes everything (code, stack, page tables) is in 32-bit
; address space. Which is true for PEI phase even in X64 builds
; because low memory is used for early firmware setup.
;
; This also assumes the standard ResetVector GDT is active.
;
; SPDX-License-Identifier: BSD-2-Clause-Patent
;------------------------------------------------------------------------------

SECTION .text
BITS 64

global Switch4Level
Switch4Level:

    ; save regs
    push rax
    push rbx
    push rcx
    push rdx

    ; cs:ip for long mode
    lea rax, [rel Switch4Level64]
    mov rbx, 0x3800000000 ; LINEAR_CODE64_SEL << 32
    or rax, rbx
    push rax

    ; cs:ip for 32-bit mode
    lea rax, [rel Switch4Level32]
    mov rbx, 0x1000000000 ; LINEAR_CODE_SEL << 32
    or rax, rbx
    push rax

    ; enter 32-bit mode
    retf

Switch4Level64:
    ; restore regs
    pop rdx
    pop rcx
    pop rbx
    pop rax

    ret

BITS 32

Switch4Level32:
    ; disable paging
    mov eax, cr0
    btc eax, 31 ; clear PG
    mov cr0, eax

    ; disable 5-level paging
    mov eax, cr4
    btc eax, 12 ; clear la57
    mov cr4, eax

    ; fixup cr3 (dereference 5th level)
    mov eax, cr3
    mov eax, [ eax ]
    and eax, 0xfffff000
    mov cr3, eax

    ; enable paging
    mov eax, cr0
    bts eax, 31 ; set PG
    mov cr0, eax

    ; back to long mode
    retf
