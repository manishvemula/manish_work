# 0 "/home/cdac/fw/edk2-ws/edk2/OvmfPkg/ResetVector/ResetVector.nasmb"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/ResetVector/ResetVector/DEBUG/AutoGen.h" 1
# 16 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/ResetVector/ResetVector/DEBUG/AutoGen.h"
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h" 1
# 21 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/X64/ProcessorBind.h" 1
# 162 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/X64/ProcessorBind.h"
typedef unsigned long long UINT64;



typedef long long INT64;



typedef unsigned int UINT32;



typedef int INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;






typedef UINT64 UINTN;




typedef INT64 INTN;
# 22 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h" 2
# 213 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 607 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef __builtin_ms_va_list VA_LIST;
# 711 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 816 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (BOOLEAN) == sizeof (BOOLEAN), "Alignment of BOOLEAN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT8) == sizeof (INT8), "Alignment of INT8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT8) == sizeof (UINT8), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT16) == sizeof (INT16), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT16) == sizeof (UINT16), "Alignment of UINT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT32) == sizeof (INT32), "Alignment of INT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT32) == sizeof (UINT32), "Alignment of UINT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT64) == sizeof (INT64), "Alignment of INT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT64) == sizeof (UINT64), "Alignment of UINT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR8) == sizeof (CHAR8), "Alignment of CHAR8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR16) == sizeof (CHAR16), "Alignment of CHAR16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INTN) == sizeof (INTN), "Alignment of INTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINTN) == sizeof (UINTN), "Alignment of UINTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (void *) == sizeof (void *), "Alignment of VOID * does not meet UEFI Specification Data Type requirements");
# 852 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyInt32EnumValue = 0x7fffffff
} __VERIFY_INT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_INT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (__VERIFY_UINT8_ENUM_SIZE) == sizeof (__VERIFY_UINT8_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_UINT16_ENUM_SIZE) == sizeof (__VERIFY_UINT16_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_INT32_ENUM_SIZE) == sizeof (__VERIFY_INT32_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
# 1026 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/ResetVector/ResetVector/DEBUG/AutoGen.h" 2
# 1 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h" 1
# 809 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdSetSku (
  UINTN SkuId
  );
# 825 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGet8 (
  UINTN TokenNumber
  );
# 841 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGet16 (
  UINTN TokenNumber
  );
# 857 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGet32 (
  UINTN TokenNumber
  );
# 873 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGet64 (
  UINTN TokenNumber
  );
# 889 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetPtr (
  UINTN TokenNumber
  );
# 905 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetBool (
  UINTN TokenNumber
  );
# 919 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSize (
  UINTN TokenNumber
  );
# 939 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGetEx8 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 960 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGetEx16 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 978 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGetEx32 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 999 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGetEx64 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1020 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetExPtr (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1041 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetExBool (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1062 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetExSize (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1081 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet8S (
  UINTN TokenNumber,
  UINT8 Value
  );
# 1100 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet16S (
  UINTN TokenNumber,
  UINT16 Value
  );
# 1119 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet32S (
  UINTN TokenNumber,
  UINT32 Value
  );
# 1138 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet64S (
  UINTN TokenNumber,
  UINT64 Value
  );
# 1167 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetPtrS (
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1187 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetBoolS (
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1210 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx8S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT8 Value
  );
# 1234 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx16S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT16 Value
  );
# 1258 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx32S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT32 Value
  );
# 1282 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx64S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT64 Value
  );
# 1312 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExPtrS (
  const GUID *Guid,
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  void *Buffer
  );
# 1337 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExBoolS (
  const GUID *Guid,
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1361 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
typedef
void
( *PCD_CALLBACK)(
  const GUID *CallBackGuid ,
  UINTN CallBackToken,
  void *TokenData,
  UINTN TokenDataSize
  );
# 1386 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCallbackOnSet (
  const GUID *Guid ,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1407 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCancelCallback (
  const GUID *Guid ,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1434 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetNextToken (
  const GUID *Guid ,
  UINTN TokenNumber
  );
# 1454 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
GUID *

LibPcdGetNextTokenSpace (
  const GUID *TokenSpaceGuid
  );
# 1483 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtr (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1515 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrS (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1549 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtrAndSize (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1584 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrAndSizeS (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {




  PCD_TYPE PcdType;




  UINTN PcdSize;






  CHAR8 *PcdName;
} PCD_INFO;
# 1635 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfo (
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1655 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfoEx (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1670 "/home/cdac/fw/edk2-ws/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSku (
  void
  );
# 18 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/ResetVector/ResetVector/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;
# 30 "/home/cdac/fw/edk2-ws/Build/OvmfX64/DEBUG_GCC5/X64/OvmfPkg/ResetVector/ResetVector/DEBUG/AutoGen.h"
extern GUID gUefiOvmfPkgTokenSpaceGuid;
extern GUID gEfiMdeModulePkgTokenSpaceGuid;
extern GUID gUefiCpuPkgTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfCpuidBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfCpuidSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfPeiMemFvBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdSevLaunchSecretBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdSevLaunchSecretSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdQemuHashTableBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdQemuHashTableSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecSvsmCaaBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecSvsmCaaSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSnpSecretsBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSnpSecretsSize;







extern const BOOLEAN _gPcd_FixedAtBuild_PcdUse5LevelPageTable;







extern const UINT32 _gPcd_FixedAtBuild_PcdSevEsWorkAreaBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbPageTableBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbPageTableSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecPageTablesBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecPageTablesSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecPeiTempRamBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecPeiTempRamSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfWorkAreaBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfWorkAreaSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbBackupBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbBackupSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdCfvBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdCfvRawDataOffset;







extern const UINT32 _gPcd_FixedAtBuild_PcdCfvRawDataSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdBfvBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdBfvRawDataOffset;







extern const UINT32 _gPcd_FixedAtBuild_PcdBfvRawDataSize;
# 0 "<command-line>" 2
# 1 "/home/cdac/fw/edk2-ws/edk2/OvmfPkg/ResetVector/ResetVector.nasmb"
;------------------------------------------------------------------------------
; @file
; This file includes all other code files to assemble the reset vector code
;
; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
; Copyright (c) 2020 - 2024, Advanced Micro Devices, Inc. All rights reserved.<BR>
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
;------------------------------------------------------------------------------

;
; If neither ARCH_IA32 nor ARCH_X64 are defined, then try to include
; Base.h to use the C pre-processor to determine the architecture.
;
%ifndef ARCH_IA32
  %ifndef ARCH_X64




      %define ARCH_X64

  %endif
%endif

%ifdef ARCH_IA32
  %ifdef ARCH_X64
    %error "Only one of ARCH_IA32 or ARCH_X64 can be defined."
  %endif
%elifdef ARCH_X64
%else
  %error "Either ARCH_IA32 or ARCH_X64 must be defined."
%endif

%include "CommonMacros.inc"

%include "PostCodes.inc"

%ifdef DEBUG_PORT80
  %include "Port80Debug.asm"
%elifdef DEBUG_SERIAL
  %include "SerialDebug.asm"
%elif 0
; Set ^ this to 1 to enable postcodes on the qemu debug console.
; Disabled by default because it is incompatible with SEV-ES/SEV-SNP and TDX.
  %include "QemuDebugCon.asm"
%else
  %include "DebugDisabled.asm"
%endif

%include "Ia32/SearchForBfvBase.asm"
%include "Ia32/SearchForSecEntry.asm"

%define WORK_AREA_GUEST_TYPE (0x0080B000U)
%define PT_ADDR(Offset) (0x00800000U + (Offset))
%define PG_5_LEVEL (0U)

%define GHCB_PT_ADDR (0x00808000U)
%define GHCB_BASE (0x00809000U)
%define GHCB_SIZE (0x00002000U)
%define SEV_ES_WORK_AREA (8433668U)
%define SEV_ES_WORK_AREA_SIZE 25
%define SEV_ES_WORK_AREA_STATUS_MSR (8433668U)
%define SEV_ES_WORK_AREA_RDRAND (8433668U + 8)
%define SEV_ES_WORK_AREA_ENC_MASK (8433668U + 16)
%define SEV_ES_WORK_AREA_RECEIVED_VC (8433668U + 24)
%define SEV_ES_VC_TOP_OF_STACK (0x00811000U + 0x0000F000U)
%define SEV_SNP_SECRETS_BASE (0x0080D000U)
%define SEV_SNP_SECRETS_SIZE (0x00001000U)
%define CPUID_BASE (0x0080E000U)
%define CPUID_SIZE (0x00001000U)
%define SVSM_CAA_BASE (0x0080F000U)
%define SVSM_CAA_SIZE (0x00001000U)
%if (0x0U > 0)
  ; There's a reserved page for SEV secrets and hashes; the VMM will fill and
  ; validate the page, or mark it as a zero page.
  %define SEV_SNP_KERNEL_HASHES_BASE (0x0U)
  %define SEV_SNP_KERNEL_HASHES_SIZE (0x0U + 0x0U)
%else
  %define SEV_SNP_KERNEL_HASHES_BASE 0
  %define SEV_SNP_KERNEL_HASHES_SIZE 0
%endif
%define SNP_SEC_MEM_BASE_DESC_1 (0x00800000U)
%define SNP_SEC_MEM_SIZE_DESC_1 (0x00809000U - SNP_SEC_MEM_BASE_DESC_1)
;
; The PcdOvmfSecGhcbBase reserves two GHCB pages. The first page is used
; as GHCB shared page and second is used for bookkeeping to support the
; nested GHCB in SEC phase. The bookkeeping page is mapped private. The VMM
; does not need to validate the shared page but it need to validate the
; bookkeeping page.
;
%define SNP_SEC_MEM_BASE_DESC_2 (GHCB_BASE + 0x1000)
%define SNP_SEC_MEM_SIZE_DESC_2 (SEV_SNP_SECRETS_BASE - SNP_SEC_MEM_BASE_DESC_2)
%define SNP_SEC_MEM_BASE_DESC_3 (SVSM_CAA_BASE + SVSM_CAA_SIZE + SEV_SNP_KERNEL_HASHES_SIZE)
%define SNP_SEC_MEM_SIZE_DESC_3 (0x00820000U - SNP_SEC_MEM_BASE_DESC_3)

%ifdef ARCH_X64


  %if (0x00006000U != 0x6000)
    %error "This implementation inherently depends on PcdOvmfSecPageTablesSize"
  %endif

  %if (0x00001000U != 0x1000)
    %error "This implementation inherently depends on PcdOvmfSecGhcbPageTableSize"
  %endif

  %if (0x00002000U != 0x2000)
    %error "This implementation inherently depends on PcdOvmfSecGhcbSize"
  %endif

  %if ((0x00809000U >> 21) != ((0x00809000U + 0x00002000U - 1) >> 21))

    %error "This implementation inherently depends on PcdOvmfSecGhcbBase not straddling a 2MB boundary"
  %endif

  %define TDX_BFV_RAW_DATA_OFFSET 0x84000U
  %define TDX_BFV_RAW_DATA_SIZE 0x0037C000U
  %define TDX_BFV_MEMORY_BASE 0xFFC84000U
  %define TDX_BFV_MEMORY_SIZE 0x0037C000U

  %define TDX_CFV_RAW_DATA_OFFSET 0U
  %define TDX_CFV_RAW_DATA_SIZE 0x84000U
  %define TDX_CFV_MEMORY_BASE 0xFFC00000U,
  %define TDX_CFV_MEMORY_SIZE 0x84000U,

  %define TDX_HEAP_STACK_BASE 0x00811000U
  %define TDX_HEAP_STACK_SIZE 0x0000F000U

  %define TDX_HOB_MEMORY_BASE 0x00809000U
  %define TDX_HOB_MEMORY_SIZE 0x00002000U

  %define TDX_INIT_MEMORY_BASE 0x0080B000U
  %define TDX_INIT_MEMORY_SIZE (0x00001000U + 0x00001000U)

  %define OVMF_PAGE_TABLE_BASE 0x00800000U
  %define OVMF_PAGE_TABLE_SIZE 0x00006000U

  %define TDX_WORK_AREA_PGTBL_READY (0x0080B000U + 4)
  %define TDX_WORK_AREA_GPAW (0x0080B000U + 8)

  %include "X64/IntelTdxMetadata.asm"
  %include "Ia32/Flat32ToFlat64.asm"
  %include "Ia32/PageTables64.asm"
  %include "Ia32/IntelTdx.asm"
  %include "X64/OvmfSevMetadata.asm"
%endif

%include "Ia32/AmdSev.asm"

%include "Ia16/Real16ToFlat32.asm"
%include "Ia16/Init16.asm"

%include "Main.asm"

  %define SEV_ES_AP_RESET_IP 8433668U
  %define SEV_LAUNCH_SECRET_BASE 0x0U
  %define SEV_LAUNCH_SECRET_SIZE 0x0U
  %define SEV_FW_HASH_BLOCK_BASE 0x0U
  %define SEV_FW_HASH_BLOCK_SIZE 0x0U
%include "Ia16/ResetVectorVtf0.asm"
